/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/scripts/students.js":
/*!*********************************!*\
  !*** ./src/scripts/students.js ***!
  \*********************************/
/***/ (() => {

eval("window.addEventListener('DOMContentLoaded', askAfterLoading);\n\nfunction askAfterLoading() {\n  allStudents();\n  document.getElementById('createUpdate').addEventListener('click', askForStudentCreation);\n  document.getElementById('clear').addEventListener('click', askForStudentRemoving);\n}\n\nconst allStudents = async () => {\n  const requestOption = {\n    method: 'GET'\n  };\n  const response = await fetch('http://127.0.0.1:3000/students/all', requestOption);\n  const students = await response.json();\n  fillStudentList(students);\n};\n\nfunction fillStudentList(studentsJson) {\n  const table = document.getElementById(\"allStudents\");\n  table.innerHTML = \"<tr> <th>Numéro</th> <th>Nom</th> <th>Prénom</th> </tr>\";\n  const linesArray = [];\n  const numCells = [];\n  const nameCells = [];\n  const firstnameCells = [];\n  studentsJson.forEach(element => {\n    const newLine = table.insertRow();\n    const newNumberCell = newLine.insertCell(0);\n    const newNameCell = newLine.insertCell(1);\n    const newFirstnameCell = newLine.insertCell(2);\n    newNumberCell.innerHTML = element['numStudent'];\n    newNameCell.innerHTML = element['name'];\n    newFirstnameCell.innerHTML = element['firstnames'];\n    linesArray.push(newLine);\n    numCells.push(newNumberCell);\n    nameCells.push(newNameCell);\n    firstnameCells.push(newFirstnameCell);\n  });\n}\n\nconst askForStudentCreation = async () => {\n  // retrieve data about student to create from the input fields\n  const newStudent = {\n    name: studentName.value,\n    firstnames: studentFirstnames.value,\n    numStudent: studentNumber.value\n  }; // body is built from created student\n\n  const bodyContent = JSON.stringify(newStudent); // options for a POST method that conains json\n\n  const requestOptions = {\n    method: 'POST',\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: bodyContent\n  }; // send the request to the server to create the entry corresponding to book\n\n  const response = await fetch('http://localhost:3000/students/create', requestOptions); // retrieve data about student to create from the input fields\n\n  const newStudentInGroup = {\n    numGroup: 0,\n    student: newStudent\n  }; // body is built from created student\n\n  const bodyContent2 = JSON.stringify(newStudentInGroup); // options for a POST method that conains json\n\n  const requestOptions2 = {\n    method: 'POST',\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: bodyContent2\n  }; // send the request to the server to create the entry corresponding to book\n\n  const response2 = await fetch('http://localhost:3000/groups/add', requestOptions2);\n  allStudents();\n};\n\nconst askForStudentRemoving = async () => {\n  // retrieve data about student to create from the input fields\n  const newStudent = {\n    name: studentName.value,\n    firstnames: studentFirstnames.value,\n    numStudent: studentNumber.value\n  }; // body is built from created student\n\n  const bodyContent = JSON.stringify(newStudent); // options for a POST method that conains json\n\n  const requestOptions = {\n    method: 'POST',\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: bodyContent\n  }; // send the request to the server to create the entry corresponding to book\n\n  const response = await fetch('http://localhost:3000/students/remove', requestOptions);\n  removeInGroup(0);\n  removeInGroup(1);\n  removeInGroup(2);\n  removeInGroup(3);\n  removeInGroup(4);\n  removeInGroup(5);\n  removeInGroup(6);\n  allStudents();\n};\n\nconst removeInGroup = async numGroupToRemove => {\n  // retrieve data about student to create from the input fields\n  var findedStudentEntry = null;\n  const requestOption = {\n    method: 'GET'\n  };\n  const findResponse = await fetch('http://127.0.0.1:3000/groups/all', requestOption);\n  const studentsJson = await findResponse.json();\n  studentsJson.forEach(element => {\n    studentElement = element['student'];\n\n    if (studentElement['numStudent'] == studentNumber.value) {\n      findedStudentEntry = studentElement;\n    }\n  });\n  const newStudentInGroup = {\n    numGroup: numGroupToRemove,\n    student: findedStudentEntry\n  }; // body is built from created student\n\n  const bodyContent2 = JSON.stringify(newStudentInGroup); // options for a POST method that conains json\n\n  const requestOptions2 = {\n    method: 'POST',\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: bodyContent2\n  }; // send the request to the server to create the entry corresponding to book\n\n  const response2 = await fetch('http://localhost:3000/groups/remove', requestOptions2);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scripts/students.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/scripts/students.js"]();
/******/ 	
/******/ })()
;